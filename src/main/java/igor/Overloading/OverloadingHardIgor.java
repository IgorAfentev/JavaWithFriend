/* –ó–∞–¥–∞–Ω–∏–µ:
    –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ calculate(), –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä (+, -, *, /)
    –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
 */

package igor.Overloading;
import java.util.Scanner;

public class OverloadingHardIgor {

    public static void main(String[] args) {
        try (Scanner scanner = new Scanner(System.in)) {
            System.out.println("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 2 * 2): ");
            String mathExample = scanner.nextLine();
            calculate(parseMathOperator(mathExample), getNumbers(mathExample));
        }

    }

    private static char parseMathOperator(String mathExample) {
        return mathExample.charAt(mathExample.indexOf(" ") + 1);
    }

    private static double[] getNumbers(String mathExample) {
        StringBuilder number1 = new StringBuilder();
        StringBuilder number2 = new StringBuilder();

        for (int i = 0; i < mathExample.length(); i++) {
            if (mathExample.charAt(i) != ' ') {
                number1.append(mathExample.charAt(i));
            } else {
                break;
            }
        }

        for (int i = mathExample.lastIndexOf(' ') + 1; i < mathExample.length(); i++) {
            number2.append(mathExample.charAt(i));
        }

        double numberOne = Double.parseDouble(number1.toString());
        double numberTwo = Double.parseDouble(number2.toString());

        return new double[]{numberOne, numberTwo};
    }

    private static void calculate(char operator, double[] numbers) {
        switch (operator) {
            case '+' -> System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç: "  + (numbers[0] + numbers[1]));
            case '-' -> System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç: "  + (numbers[0] - numbers[1]));
            case '*' -> System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç: "  + (numbers[0] * numbers[1]));
            case '/' -> System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç: "  + (numbers[0] / numbers[1]));
        }
    }
}

//–†–µ—à–µ–Ω–∏–µ ChatGPT
class OverloadingHardIgorChat {

    public static void main(String[] args) {
        try (Scanner scanner = new Scanner(System.in)) {
            System.out.println("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 * 2): ");
            String mathExample = scanner.nextLine().trim();

            String[] parts = mathExample.split("\\s+"); // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º

            if (parts.length != 3) {
                System.out.println("–û—à–∏–±–∫–∞! –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.");
                return;
            }

            double num1, num2;
            try {
                num1 = Double.parseDouble(parts[0]);
                num2 = Double.parseDouble(parts[2]);
            } catch (NumberFormatException e) {
                System.out.println("–û—à–∏–±–∫–∞! –í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞.");
                return;
            }

            char operator = parts[1].charAt(0);
            calculate(operator, num1, num2);
        }
    }

    private static void calculate(char operator, double num1, double num2) {
        switch (operator) {
            case '+' -> System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç: " + (num1 + num2));
            case '-' -> System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç: " + (num1 - num2));
            case '*' -> System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç: " + (num1 * num2));
            case '/' -> {
                if (num2 == 0) {
                    System.out.println("–û—à–∏–±–∫–∞! –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å.");
                } else {
                    System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç: " + (num1 / num2));
                }
            }
            default -> System.out.println("–û—à–∏–±–∫–∞! –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä.");
        }
    }
}

/*
üîπ–ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —É–ª—É—á—à–µ–Ω–æ?
‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å split() ‚Äì –∏–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç —Å–ª–æ–∂–Ω–æ–≥–æ getNumbers().
‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞ ‚Äì –µ—Å–ª–∏ —á–∞—Å—Ç–µ–π –≤ —Å—Ç—Ä–æ–∫–µ –Ω–µ 3 (—á–∏—Å–ª–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä —á–∏—Å–ª–æ), –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–≤–æ–¥–∏—Ç –æ—à–∏–±–∫—É.
‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–µ–ª ‚Äì –µ—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ double, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –ª–æ–º–∞–µ—Ç—Å—è.
‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å ‚Äì –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º ArithmeticException.
 */