/*–ó–∞–¥–∞–Ω–∏–µ:
    –ù–∞–ø–∏—à–∏—Ç–µ —Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ multiply(), –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–º–Ω–æ–∂–∞—é—Ç –¥–≤–∞ —á–∏—Å–ª–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ (int, double, float)
 */

//–ú–æ—ë —Ä–µ—à–µ–Ω–∏–µ
package igor.Overloading;
import java.util.Scanner;

public class OverloadingMediumIgor {

    public static void main(String[] args) {
        try(Scanner scanner = new Scanner(System.in)) {
            int dataType;
            String text = """
                    –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö:
                    1 - Integer
                    2 - Double
                    3 - Float
                    """;

            System.out.println(text);
            dataType = scanner.nextInt();
            switch (dataType) {
                case 1 -> System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è —á–∏—Å–µ–ª: " + multiply(getIntNumbers()));
                case 2 -> System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è —á–∏—Å–µ–ª: " + multiply(getDoubleNumbers()));
                case 3 -> System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è —á–∏—Å–µ–ª: " + multiply(getFloatNumbers()));
            }
        }
    }

    private static int[] getIntNumbers() {
        int[] arrayOfIntNumbers = new int[2];
        try (Scanner scanner = new Scanner(System.in)) {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: ");
            while (!scanner.hasNextInt()) {
                System.out.println("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                scanner.next();
            }
            arrayOfIntNumbers[0] = scanner.nextInt();

            System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: ");
            while (!scanner.hasNextInt()) {
                System.out.println("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                scanner.next();
            }
            arrayOfIntNumbers[1] = scanner.nextInt();
        }
        return arrayOfIntNumbers;
    }

    private static double[] getDoubleNumbers() {
        double[] arrayOfIntNumbers = new double[2];
        try (Scanner scanner = new Scanner(System.in)) {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: ");
            while (!scanner.hasNextDouble()) {
                System.out.println("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                scanner.next();
            }
            arrayOfIntNumbers[0] = scanner.nextDouble();

            System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: ");
            while (!scanner.hasNextDouble()) {
                System.out.println("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                scanner.next();
            }
            arrayOfIntNumbers[1] = scanner.nextDouble();
        }
        return arrayOfIntNumbers;
    }

    private static float[] getFloatNumbers() {
        float[] arrayOfFloatNumbers = new float[2];
        try (Scanner scanner = new Scanner(System.in)) {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: ");
            while (!scanner.hasNextFloat()) {
                System.out.println("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                scanner.next();
            }
            arrayOfFloatNumbers[0] = scanner.nextFloat();

            System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: ");
            while (!scanner.hasNextFloat()) {
                System.out.println("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                scanner.next();
            }
            arrayOfFloatNumbers[1] = scanner.nextFloat();
        }
        return arrayOfFloatNumbers;
    }

    static int multiply(int[] args) {
        return args[0] * args[1];
    }

    static double multiply(double[] args) {
        return args[0] * args[1];
    }

    static float multiply(float[] args) {
        return args[0] * args[1];
    }
}

//–†–µ—à–µ–Ω–∏–µ ChatGPT
class OverloadingMediumIgorChat {

    public static void main(String[] args) {
        try (Scanner scanner = new Scanner(System.in)) {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: ");
            Number num1 = getNumber(scanner);

            System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: ");
            Number num2 = getNumber(scanner);

            if (num1 instanceof Integer && num2 instanceof Integer) {
                System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è: " + multiply(num1.intValue(), num2.intValue()));
            } else if (num1 instanceof Double || num2 instanceof Double) {
                System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è: " + multiply(num1.doubleValue(), num2.doubleValue()));
            } else {
                System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è: " + multiply(num1.floatValue(), num2.floatValue()));
            }
        }
    }

    private static Number getNumber(Scanner scanner) {
        while (true) {
            if (scanner.hasNextInt()) {
                return scanner.nextInt();
            } else if (scanner.hasNextDouble()) {
                return scanner.nextDouble();
            } else if (scanner.hasNextFloat()) {
                return scanner.nextFloat();
            } else {
                System.out.println("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.");
                scanner.next();
            }
        }
    }

    static int multiply(int a, int b) {
        return a * b;
    }

    static double multiply(double a, double b) {
        return a * b;
    }

    static float multiply(float a, float b) {
        return a * b;
    }
}

/*
üîπ–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å?
‚úÖ –ù–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö ‚Äì –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–µ —á–∏—Å–ª–∞
‚úÖ –£–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ ‚Äì –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –≤–≤–æ–¥–∏—Ç –¥–≤–∞ —á–∏—Å–ª–∞, –∞ –∫–æ–¥ —Å–∞–º –≤—ã–±–∏—Ä–∞–µ—Ç –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥ multiply()
‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏ —Ç–∏–ø–æ–≤ ‚Äì –µ—Å–ª–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ int, –∞ –≤—Ç–æ—Ä–æ–µ double, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç double multiply()
 */