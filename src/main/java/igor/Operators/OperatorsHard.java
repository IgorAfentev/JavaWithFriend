/*–ó–∞–¥–∞–Ω–∏–µ:
    –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ –∏
    –æ–ø–µ—Ä–∞—Ç–æ—Ä (+, -, *, /), –∞ –∑–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
 */

//–ú–æ—ë —Ä–µ—à–µ–Ω–∏–µ
package igor.Operators;
import java.util.Scanner;

public class OperatorsHard {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        System.out.println("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: ");
        int num1 = scanner.nextInt();

        System.out.println("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: ");
        int num2 = scanner.nextInt();

        System.out.println("–í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ \"+, -, *, /\": ");
        char operator = scanner.next().charAt(0);

        switch (operator) {
            case '+':
                System.out.printf("–°—É–º–º–∞ —á–∏—Å–µ–ª: %d%n", num1 + num2);
                break;
            case '-':
                System.out.printf("–†–∞–∑–Ω–∏—Ü–∞ —á–∏—Å–µ–ª: %d%n", num1 - num2);
                break;
            case '*':
                System.out.printf("–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª: %d%n", num1 * num2);
                break;
            case '/':
                System.out.printf("–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ª–µ–Ω–∏—è —á–∏—Å–µ–ª: %d%n", num1 / num2);
                break;
        }

        scanner.close();
    }
}

//–†–µ—à–µ–Ω–∏–µ ChatGPT

//import java.util.Scanner;

class OperatorsHardChat {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: ");
        double num1 = scanner.nextDouble();

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: ");
        double num2 = scanner.nextDouble();

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä (+, -, *, /): ");
        char operator = scanner.next().charAt(0);

        double result;
        boolean validOperation = true;

        switch (operator) {
            case '+':
                result = num1 + num2;
                System.out.printf("–°—É–º–º–∞ —á–∏—Å–µ–ª: %.2f%n", result);
                break;
            case '-':
                result = num1 - num2;
                System.out.printf("–†–∞–∑–Ω–∏—Ü–∞ —á–∏—Å–µ–ª: %.2f%n", result);
                break;
            case '*':
                result = num1 * num2;
                System.out.printf("–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª: %.2f%n", result);
                break;
            case '/':
                if (num2 == 0) {
                    System.out.println("–û—à–∏–±–∫–∞: –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!");
                    validOperation = false;
                } else {
                    result = num1 / num2;
                    System.out.printf("–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ª–µ–Ω–∏—è: %.2f%n", result);
                }
                break;
            default:
                System.out.println("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä!");
                validOperation = false;
        }

        if (validOperation) {
            System.out.println("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.");
        }

        scanner.close();
    }
}

/*
üîπ –ß—Ç–æ —É–ª—É—á—à–µ–Ω–æ?
‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º double –≤–º–µ—Å—Ç–æ int, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞.
‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å (if (num2 == 0)).
‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä default –≤ switch-case, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.
‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ (%.2f), —á—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.
‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.
 */