/* –ó–∞–¥–∞–Ω–∏–µ:
    –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
 */

//–ú–æ—ë —Ä–µ—à–µ–Ω–∏–µ
package igor.MethodsParameters;
import java.util.Arrays;
import java.util.Random;

public class MethodsParametersHardIgor {

    public static void main(String[] args) {
        int[] array = generatorOfArray();
        System.out.println("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: \n" + Arrays.toString(array));
        System.out.println("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞: \n" + maxElementOfArray(array));
    }

    private static int[] generatorOfArray() {
        Random random = new Random();

        int[] arrayOfRandomNumbers = new int[10];
        for (int i = 0; i < arrayOfRandomNumbers.length; i++) {
            arrayOfRandomNumbers[i] = random.nextInt(100);
        }

        return arrayOfRandomNumbers;
    }

    static int maxElementOfArray(int[] arrayOfNumbers) {
        if (Arrays.stream(arrayOfNumbers).max().isPresent()) {
            return Arrays.stream(arrayOfNumbers).max().getAsInt();
        } else {
            return -1;
        }
    }
}

//–†–µ—à–µ–Ω–∏–µ ChatGPT
class MethodsParametersHardIgorChat {

    public static void main(String[] args) {
        int[] array = generatorOfArray();
        System.out.println("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: \n" + Arrays.toString(array));
        System.out.println("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞: \n" + maxElementOfArray(array));
    }

    private static int[] generatorOfArray() {
        Random random = new Random();
        int[] arrayOfRandomNumbers = new int[10];

        for (int i = 0; i < arrayOfRandomNumbers.length; i++) {
            arrayOfRandomNumbers[i] = random.nextInt(100); // 0-99
        }
        return arrayOfRandomNumbers;
    }

    static int maxElementOfArray(int[] arrayOfNumbers) {
        return Arrays.stream(arrayOfNumbers).max().orElse(-1);
    }
}

/*
üîπ –ß—Ç–æ –±—ã–ª–æ —É–ª—É—á—à–µ–Ω–æ?:
‚úÖ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø–æ—Ç–æ–∫ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é OptionalInt max
‚úÖ –ó–∞–º–µ–Ω–∏–ª–∏ isPresent() –∏ getAsInt() –Ω–∞ orElse(-1)
 */