/*–ó–∞–¥–∞–Ω–∏–µ:
    –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
    (—Ä–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π, —Ä–∞–≤–Ω–æ–±–µ–¥—Ä–µ–Ω–Ω—ã–π, —Ä–∞–∑–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π) –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º —Å—Ç–æ—Ä–æ–Ω–∞–º.
 */

//–ú–æ—ë —Ä–µ—à–µ–Ω–∏–µ
package igor.Branching;
import java.util.Scanner;

public class BranchingHard {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–µ—Ä–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã: ");
        int side1 = scanner.nextInt();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω—ã: ");
        int side2 = scanner.nextInt();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —Ç—Ä–µ—Ç—å–µ–π —Å—Ç–æ—Ä–æ–Ω—ã: ");
        int side3 = scanner.nextInt();

        if (side1 == side2 && side2 != side3 ||
                side1 == side3 && side3 != side2 ||
                side2 == side3 && side3 != side1) {
            System.out.print("–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Ä–∞–≤–Ω–æ–±–µ–¥—Ä–µ–Ω–Ω—ã–π");
        } else if (side1 == side2) {
            System.out.print("–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Ä–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π");
        } else {
            System.out.print("–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Ä–∞–∑–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π");
        }

        scanner.close();

    }
}

//–†–µ—à–µ–Ω–∏–µ ChatGPT
//import java.util.Scanner;

class BranchingHardChat {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–µ—Ä–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã: ");
        int side1 = scanner.nextInt();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω—ã: ");
        int side2 = scanner.nextInt();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —Ç—Ä–µ—Ç—å–µ–π —Å—Ç–æ—Ä–æ–Ω—ã: ");
        int side3 = scanner.nextInt();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        if (side1 + side2 > side3 && side1 + side3 > side2 && side2 + side3 > side1) {
            if (side1 == side2 && side2 == side3) {
                System.out.println("–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Ä–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π");
            } else if (side1 == side2 || side1 == side3 || side2 == side3) {
                System.out.println("–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Ä–∞–≤–Ω–æ–±–µ–¥—Ä–µ–Ω–Ω—ã–π");
            } else {
                System.out.println("–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Ä–∞–∑–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π");
            }
        } else {
            System.out.println("–¢–∞–∫–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
        }

        scanner.close();
    }
}

/*
üîπ –ß—Ç–æ —É–ª—É—á—à–µ–Ω–æ?
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω println –≤–º–µ—Å—Ç–æ print
 */